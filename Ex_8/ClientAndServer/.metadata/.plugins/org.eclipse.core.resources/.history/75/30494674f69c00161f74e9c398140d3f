#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/dispatch.h>
#include <sys/mman.h>
#include <pthread.h>
#include <process.h>

typedef struct message{
	char * msg;
	int number;
}message_buffer;

typedef struct pid_data{
	pthread_mutex_t pid_mutex;
	pid_t pid;
}pid_data;

pid_data sharedMemoryRead(){
	pid_data *other_struct;
	int file_descriptor = shm_open("/sharedpid",O_RDWR,S_IRWXU);
	void *s_mem_ptr = mmap(0,sizeof(pid_data),PROT_READ | PROT_WRITE,MAP_SHARED,file_descriptor,0);

	other_struct = (pid_data* )s_mem_ptr;
	printf("Pid is: %i", other_struct->pid);

	return *other_struct;
}

void *client_1(){
	printf("Client 1 start\n");
	message_buffer sent_data;
	sent_data.msg = "Client 1\n";
	message_buffer received_data;
	pid_data pid_client = sharedMemoryRead();
	//Connect to a server/channel

	int channel_id = ConnectAttach(0,pid_client.pid, 1, 0, 0);

	while(1){
		int status_value = MsgSend(channel_id, &sent_data, sizeof(message_buffer),&received_data,sizeof(message_buffer));
		printf("Status value in client 1: %d\n", status_value);
		usleep(500 * 1000);
	}
}

void *client_2(){
	printf("Client 2 start\n");
	message_buffer sent_data;
	sent_data.msg = "Client 2\n";
	message_buffer received_data;
	pid_data pid_client = sharedMemoryRead();
	//Connect to a server/channel

	int channel_id = ConnectAttach(0,pid_client.pid, 1, 0, 0);

	while(1){
		int status_value = MsgSend(channel_id, &sent_data, sizeof(message_buffer),&received_data,sizeof(message_buffer));
		printf("Status value in client 2: %d\n", status_value);
		usleep(500 * 1000);
	}
}

void *client_3(){
	printf("Client 3 start\n");
	message_buffer sent_data;
	sent_data.msg = "Client 3\n";
	message_buffer received_data;
	pid_data pid_client = sharedMemoryRead();
	//Connect to a server/channel

	int channel_id = ConnectAttach(0,pid_client.pid, 1, 0, 0);

	while(1){
		int status_value = MsgSend(channel_id, &sent_data, sizeof(message_buffer),&received_data,sizeof(message_buffer));
		printf("Status value in client 3: %d\n", status_value);
		usleep(500 * 1000);
	}
}

void *client_4(){
	printf("Client 4 start\n");
	message_buffer sent_data;
	sent_data.msg = "Client 4\n";
	message_buffer received_data;
	pid_data pid_client = sharedMemoryRead();
	//Connect to a server/channel

	int channel_id = ConnectAttach(0,pid_client.pid, 1, 0, 0);

	while(1){
		int status_value = MsgSend(channel_id, &sent_data, sizeof(message_buffer),&received_data,sizeof(message_buffer));
		printf("Status value in client 4: %d\n", status_value);
		usleep(500 * 1000);
	}
}


int main(int argc, char *argv[]) {
	printf("Client");
	/*message_buffer sent_data;
	message_buffer received_data;
	pid_data pid_client = sharedMemoryRead();
	//Connect to a server/channel*/

	//channel_id = ConnectAttach(0,pid_client.pid, 1, 0, 0);

	/*test */
	printf("Client 4 start\n");
	message_buffer sent_data;
	sent_data.msg = "Client 4\n";
	message_buffer received_data;
	pid_data pid_client = sharedMemoryRead();
	//Connect to a server/channel

	int channel_id = ConnectAttach(0,pid_client.pid, 1, 0, 0);

	/*end test*/

	while(1){
    MsgSend(channel_id,&sent_data, sizeof(message_buffer),&received_data,sizeof(message_buffer));
	printf(received_data.msg);

	}

	while(1);
	pthread_t thread1,thread2,thread3,thread4;

	pthread_create(&thread1,NULL,client_1,0);
	pthread_create(&thread2,NULL,client_2,0);
	pthread_create(&thread3,NULL,client_3,0);
	pthread_create(&thread4,NULL,client_4,0);
	pthread_join(thread1,NULL);

	ChannelDetach(channel_id);

	return EXIT_SUCCESS;
}
