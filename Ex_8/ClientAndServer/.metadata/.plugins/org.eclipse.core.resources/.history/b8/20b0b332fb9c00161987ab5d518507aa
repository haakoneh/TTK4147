#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <sys/dispatch.h>
#include <sys/mman.h>
#include <pthread.h>
#include <process.h>
#include <sys/neutrino.h>

typedef struct message{
	char msg;
	int number;
}message_buffer;

typedef struct pid_data{
	pthread_mutex_t pid_mutex;
	pid_t pid;
}pid_data;


void mutexAddAttribute(pid_data *mutex_ex){
	pthread_mutexattr_t myattr;
	pthread_mutexattr_init(&myattr);
	pthread_mutexattr_setpshared(&myattr,PTHREAD_PROCESS_SHARED);
	pthread_mutex_init(&mutex_ex->pid_mutex,&myattr);

}

int createSharedMemory(pid_data *mutex_ex) {
	pid_data *pid_mutex_ex;
	//pid_mutex_ex = malloc(sizeof(pid_data));

	int file_descriptor = shm_open("/sharedpid",O_RDWR | O_CREAT,S_IRWXU);

	ftruncate(file_descriptor,sizeof(pid_data));

	void *s_mem_ptr = mmap(0,sizeof(pid_data),PROT_READ | PROT_WRITE,MAP_SHARED,file_descriptor,0);


	//(struct pid_data*) s_mem_ptr;
	pid_mutex_ex = (pid_data* )s_mem_ptr;
	//s_mem_ptr = (struct pid_data*) &pid_mutex_ex;
	mutexAddAttribute(mutex_ex);
	pid_mutex_ex->pid = getpid();
	printf("the pid is: %i\n", getpid());
	return EXIT_SUCCESS;
}


int main(int argc, char *argv[]) {
	printf("Server\n");
	pid_data our_mutex;
	struct _msg_info msg_info;


	createSharedMemory(&our_mutex);



	message_buffer received_data;
	message_buffer sent_data;
	received_data.msg = 'c';
	sent_data.msg = 'c';
	int channel_id = ChannelCreate(0);

	//msgreceive will return a receive msg id and the buffer will be filled with the data the client sent.
	int msg_id = 0;
	while(1){
		printf("please work\n");
		msg_id = MsgReceive(channel_id,&received_data,sizeof(message_buffer),&msg_info);

		if( -1 == msg_id){
			printf("error");
			break;
		}
		printf("Received the following message:  ");
		printf(received_data.msg);

		printf("msg id: %i\n", msg_id);
		sent_data.msg = "Hello client sir, I received your message, this is my formal gratitude!";
		MsgReply(msg_id,EOK,&sent_data,sizeof(message_buffer));
		usleep(1000*500);
	}


	return EXIT_SUCCESS;
}
